# HTTP
    超文本传输协议
    基于请求/响应模式的无状态的协议

# 浏览器与服务器通信的过程
    客户端发起连接/客户端发送请求/服务器相应请求/服务器关闭连接

# 持续连接
    ...

# HTTP URL
    http://sdcit.cn[:80][/index.php]
    -- 默认port 为80
    -- URI部分以/开头

# URI
    URI [统一资源标识符]纯粹是一个符号结构
    URL [统一资源定位符]属于URI,URL包含了查找某个资源的足够信息          -- http://sdcit.cn/about/index.php
    URN [通用资源名]属于URI,URN无法通过该标识符查找任何数据              -- mailto:admin@sdcit.cn

# HTTP请求
    包括请求行/消息报头/请求正文

    # example:
        POST /dwr/call/plaincall/WlanReportNet.reportNet.dwr HTTP/1.1
        Accept:image/gif
        Accept-Encoding:gzip, deflate
        Accept-Language:zh-CN,zh;q=0.8
        Cache-Control:max-age=0
        Connection:keep-alive
        Content-Length:482
        Content-Type:text/plain
        Cookie:JSESSIONID=E5FAA377C634F78EF9FC49F5C54E8195; accesscookie=120444170.16671.0000
        Host:cmcc.sd.chinamobile.com:8001
        ...(省略)

        username=sc&password=123456

    # 请求行
        Method Request-URI HTTP-Version CRLF            -- 请求行
        -- CRLF 是回车换行,除了结尾的CRLF外,不允许有单独的CR和LF,请求行以空格分隔
        -- example: GET /index.php HTTP/1.1 (CRLF)

        # Method
            常用的有GET/POST/HEAD

            # GET
                请求获取由Resquest-URI所标识的资源

            # POST
                在Resquest-URI标识资源后附加新的数据

            # head
                只请求获取由Resquest-URI所标识的资源的消息报头[响应消息报头][通常用来测试链接有效性]

    # 消息报头
        ↓

    # 请求正文
        消息报头和请求正文之间有一个(CRLF)空行,表示消息报头已经结束

# HTTP 响应
    包括状态行/消息报头/响应正文

    # 状态行
        HTTP-Version Status-Code Reason-Phrase CRLF         -- 状态行 
        -- example: HTTP/1.1 200 OK
        -- 状态代码
            1xx: 指示信息           -- 请求已接收,继续处理
            2xx: 成功               -- 请求成功接收
            3xx: 重定向             -- 完成请求必须进行更进一步操作
            4xx: 客户端错误         -- 请求有语法错误或请求无法实现
            5xx: 服务器端错误       -- 服务器未能实现合法的请求

        -- 常见status code
            200:请求成功/400:请求有语法错误/401:请求未经授权/403:服务器收到请求,但拒绝提供服务/404:请求的资源不存在
            500:服务器发生不可预期的错误/503:服务器当前无法处理请求,一段时间后可能恢复正常

    # 消息报头
        ↓

    # 响应正文
        -- 通常请求成功之后会在消息报头最后的空行后面返回页面内容

# HTTP 消息报头
    包括普通报头域/请求报头域/响应报头域/实体报头域
    -- 每个报头域都是 键+':'+空格+值组成的
    -- 不区分大小写

    # 普通报头域
        有少数报头域应用于所有请求和响应消息,但并不用于被传输的实体

        # 常用普通报头域
            Cache-Control[HTTP1.1]
            -- 分为请求时和响应时两种,最常用的值是no-cache[不缓存],用于请求或响应不缓存
            -- code:    header('Cache-Control: no-cache');

            Date
            -- 消息产生的日期和时间
            -- 对于服务器端,应该总是发送Date报头域
            -- 对于客户端,只有在请求消息中包含实体正文[请求正文]时才应该发送Date报头域

            Connection
            -- 允许发送者指定连接选项,如指定连接是持续的/或close,通知服务器在响应完成后关闭连接
        
            Pragma
            -- 用于包含特定实现[应用到请求和响应的任何接受者]
            -- 常用 no-cache[配合Cache-Control兼容HTTP版本]

    # 请求报头域
        允许客户端向服务器端传递请求的附加信息及客户端自身的信息

        # 常用请求报头域
            Accept
            -- 客户端接收信息的类型[image/gif]

            Accept-Charset
            -- 客户端接收的字符集

            Authorization
            -- 证明客户端有权访问某个资源[当服务器返回401时可发送包含该报头域的请求,要求服务器进行验证]

            Host[必须]
            -- 请求资源的主机名和端口号
            -- example: Host: sdcit.cn:8080
            -- 发送HTTP请求时,这个报头域是必须的

            User-Agent
            -- 包含客户端的操作系统/浏览器等客户端属性
            -- 非必须

    # 响应报头域
        关于服务器的信息和对资源进行下一步访问的信息

        # 常用响应报头域
            Location
            -- 重定向

            Server
            -- 服务器端处理请求的的软件信息
            -- 与请求报头User-Agent对应
            -- example: Server: Apache-Coyote/1.1

            WWW-Authenticate
            -- 必须包含在401响应消息中
            -- 与Authorization对应
            -- example: WWW-Authenticate: Basic realm="Basic Auth Test!"        -- 基本验证机制

    # 实体报头域
        -- 请求或响应消息中都可以包含一个实体,实体由实体报头域和实体正文[分为请求正文/响应正文]组成
        -- 响应消息可以只包含实体报头域而没有实体正文
        -- 实体报头域包含了实体正文和资源的元信息
            
        # 常用实体报头域
            Content-Encoding
            -- 描述媒体类型资源[编码方式]
            -- example: Content-Encoding: gzip

            Content-Length
            -- 实体正文长度

            Content-Type
            -- 实体正文的媒体类型
            -- example: Content-Type: text/html;charset=utf-8

            Last-Modified
            -- 资源最后的修改日期和时间

            Expires
            -- 给出响应过期的日期和时间
            -- 当浏览器使用缓存机制时,如果再次访问时该实体报头域给出的时间比[响应消息中的]Data报头域的时间更早或相同,那么浏览器就会不实用缓存,重新请求数据
            -- 必须是RFC 1123中的时间格式
            -- example: Expires: Mon, 03 Oct 2016 02:41:14 GMT
            -- 其他格式将被看作过期
            -- 为了让浏览器不缓存该资源,可以设置为
            -- code: header('Cache-Control:no-cache,must-revalidate');header('Expries: 0');










    









    









