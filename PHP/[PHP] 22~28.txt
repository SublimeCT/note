第二十二章 使用OOP注册会员
<?php 
    页面结构
        22.php
        22_login.inc.php / 22_reg.inc.php / 22_start.inc.php / 22_member.inc.php
        22_Main.class.php / 22_User.class.php / 22_Login.class.php / 22_Reg.class.php / 22_Tool.class.php

    /*
     *  创建Main类,执行总管方法,根据index的值载入页面
     *  登录和注册对应Login和Reg类
     *  Login和Reg 先判表单数据然后执行对应操作
     *  注册成功写入xml并载入login,调用Tool::_alertLocation()   /   失败调用Tool::_alertBack()
     *  登录成功设置cookie并载入memer,调用Tool::_alertLocation()   /   失败调用Tool::_alertBack()
     *  
     */


第二十三章 使用 Mysqli操作数据库

    [建立和断开连接]
        $_mysqli = new mysqli('localhost','root','7777777'[,'guest']);      //建立连接

        $_mysqli -> select_db('test');      //单独选择数据库

        $_mysqli -> close();                //断开之前的数据库连接

    [统一编码]
        为保证数据能够正确显示,保持以下几个编码格式的统一 :         
            PHP声明的HTTP报头编码格式            header('content-type:text/html;charset=utf-8');
            与数据库间传输的字符的字符编码       $_mysqli->query('set names utf8;');
            数据表编码格式
            
        与PHP中不同的是，MySQL中指定UTF8编码格式使用“utf8”，而不是“utf-8”

    [处理连接错误]
        /*
         *  获取连接错误代码  mysqli_connect_errno()
         *  获取连接错误信息  mysqli_connect_error()
         *  获取数据库操作错误代码  $_mysqli -> errno
         *  获取数据库操作错误信息  $_mysqli -> error
         *  因为使用面向对象方式创建的 mysqli 对象一旦连接失败,就不能调用方法或属性
         *  所以只能通过面向过程的方法获取错误信息
         *  连接错误代码为0 是连接成功
         */

        if (mysqli_connect_errno()) {
            exit("连接数据库失败,错误代码:".mysqli_connect_errno()."<br>错误信息:".mysqli_connect_error());
        }

        if ($_mysqli -> errno) {
            exit("执行数据库操作失败,错误代码:".$_mysqli -> errno."<br>错误信息:".$_mysqli -> error);
        }

    [与数据库进行交互]
        [获取并解析结果集]
            $_mysqli -> set_charset('utf8');            
            $_mysqli -> query('set names utf8');        //设置与数据库间传输的字符的字符编码

            $_sql = 'SELECT * FROM g_friend';
            $_result = $_mysqli -> query($_sql);        //执行sql语句
            //$_assoc = $_result->fetch_assoc();        //从结果集取出一行数据[关联数组]
            $_row = $_result->fetch_object();           //从结果集取出一行数据[对象]

            [遍历结果集]
                while (!!$_r = $_result->fetch_object()) {          //对象方式
                    var_dump($_r);
                }

            var_dump($_row);

            $_result -> free();                         //销毁结果集

        [选择的行数和受影响的行数]
            echo $_result->num_rows             //选择的行数
            echo $_mysqli->affected_rows;       //选择的行数     这是mysqli下的属性

        [获取字段信息]
            echo $_result->field_count;         //获取字段数量
            echo $_result->fetch_field();       //获取字段
            $_result->fetch_fields();           //一次性取得字段数组
            $_result->data_seek(1);             //按行移动数据指针

        [执行多条sql语句]
        
            [mysqli 提供的方法]
                if ($_mysqli -> multi_query($_sql)) {              // 执行多条sql语句 , 返回值true / false
                    $_result = $_mysqli -> store_result();         // 获取第一条sql的结果集
                    print_r($_result->fetch_object());

                    echo "<br>";

                    $_mysqli -> next_result();                     // 执行下一条sql
                    $_result = $_mysqli -> store_result();         // 获取下一条sql的结果集
                    if (!$_result) {
                        exit('sql执行失败 -2');
                    }
                    print_r($_result->fetch_object());

                }else{
                    exit('sql执行失败 -1');
                }

            [封装query]
                public function querySQLs($sqls,$f=true){

                    $resArr = [];
                    $sqlArr = explode(';', $sqls);
                    
                    if (trim($sqlArr[count($sqlArr)-1]) == '') {    // sqls最后一句末尾可能有;,可能出现空字符串
                        array_pop($sqlArr);                
                    }

                    if (!$f) {                                      // 判断是否执行事务
                        $this->_mysqli->autocommit(false);          // 禁止自动提交
                        $this->_isShiWu = true;                     // 私有变量检测是否是事务
                    }

                    if (count($sqlArr) === 1) {                     // 如果只有一条sql,就直接调用select,最终返回单个数组
                        return $this->select($sqlArr[0]);
                    }

                    foreach ($sqlArr as $v) {
                        array_push($resArr,$this->select($v));      // 在检测错误方法中加入判断,如果执行事务且出错就回滚
                    }

                    $this->_mysqli->autocommit(true);               // 事务执行成功后提交sql
                    return $resArr;
                }

        [执行数据库事务]
            /* 
             *  事务是一组有序的数据库操作,只有当所有操作都成功才执行这个事务,有一个操作失败就回滚
             *  需要将表的存储引擎设置为InnoDB
             *  需要关闭sql的自动提交
             */
            
            $_sql='';
            $_sql.='UPDATE g_flower SET G_ID=G_ID+100 WHERE G_ToUser=\'黑气一哭\';';
            $_sql.='UPDATE g_flower SET G_ID=G_ID+100 WHERE G_ToUser=\'可乐王子\';';

            $_mysqli -> autocommit(false);              //禁止自动提交

            if ($_mysqli->multi_query($_sql)) {         //执行第一条sql

                $_success = $_mysqli -> affected_rows == 1 ? true : false;      //获取受影响的行数

                $_mysqli -> next_result();                                      //执行下一条
                $_success2 = $_mysqli -> affected_rows == 1 ? true : false;     //获取受影响的行数

                if ($_success && $_success2) {          //判断是否都执行成功
                    echo "事务执行成功<br>";
                    $_mysqli -> autocommit(true);       //自动提交
                }else{
                    echo "事务执行失败,回滚中...<br>";
                    $_mysqli -> rollback();             //执行数据回滚
                }
            }else{
                exit('sql执行失败 -1');                 //如果第一条执行失败不会执行第二条,无需回滚
            }

            $_mysqli -> autocommit(true);          //开启自动提交


第二十四章 创建 TPL自定义模板

    /*
     *  模版引擎特点:     鼓励分离 / 促进分工 / 比PHP更容易解析 / 增加安全性 
     *  TPL模版流程图:
     *                 [纯php文件]                 [模版解析类]
     *                  index.php            includes/Parser.class.php
     *                      |                            | |                        [PHP+HTML 混合编译文件]          [纯HTML静态缓存文件]
     *                      |--------------> includes/Templates.class.php -------> templates_c/xxxx.tpl.php ------> templates_c/xxxx.tpl.html 
     *                      |                              |           ╲
     *                templates/index.tpl    config/profile.xml          ╲
     *                  [模版文件]               [系统变量库]            [模版类]
     */
    
    [创建TPL模版引擎]
        a) index.php主文件，用于编写业务逻辑。
        b) template.inc.php模板初始化文件，用于初始模版信息。
        c) templates目录存放所有的模板文件。
        d) templates_c目录存放所有编译文件。
        e) cache目录存放所有缓存文件。
        f) includes目录存放所有的类文件。
        g) config目录存放模板系统变量配置文件。
        h) test.php测试用的文件。



===================



httpd.conf

DocumentRoot "D:/wamp/www/"


ServerRoot "D:/wamp/bin/apache/apache2.4.9"

Listen 0.0.0.0:80
Listen [::0]:80






php.ini

extension_dir = "D:/wamp/bin/php/php5.5.12/ext/"

extension=



引用赋值

    $age = 12;
    $num = &$age;
    $num = 100;

    //$age = 100;

PHP 中复选框checkbox 表单的提交和处理
    PHP表单提交页面复选框的名称后要加[],这样在接收页面才能得到正确的结果
    表单提交后得到的是一个数组,然后通过访问数组元素得到表单的具体vaule值

$_SERVER
    获取当前服务器的信息,以及HTTP的请求信息

$_REQUEST
    默认情况下包含了 $_GET,$_POST 和 $_COOKIE 的数组



提高密码的安全
    通过'密码加盐'的方式提高密码的安全性
        添加salt字段
            alter table `user` add `salt` char(32) not null after `password`;
        密码盐
            $salt = md5(uniqid(microtime()));           // 带有当前微秒数和时间戳[microtime()]生成的唯一id
        密码加盐
            $password = md5($salt.md5($password));
    

可变函数
    $str = 'mt_rand';
    echo ($str(1,10));

在数组最后追加一项
    $arr = range(0,9);
    $arr[] = 100;
    var_dump($arr);


生成图片像素点
    imagesetpixel()


限制文件访问范围
    ini_set('open_basedir',__DIR__);        // __DIR__当前文档路径名

判断文件名是否为一个文件
    is_file($path);

判断文件名是否为一个路径
    is_dir($path);

尝试开启session
    if (session_status() !== PHP_SESSION_ACTIVE) {session_start();}
    // PHP_SESSION_ACTIVE) = 2 









