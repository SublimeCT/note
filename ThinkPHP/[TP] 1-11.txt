<?php

[2] ThinkPHP安装与配置

    [index.php]

        // 开启调试模式 建议开发阶段开启 部署阶段注释或者设为false
        define('APP_DEBUG',True);

        // 定义应用目录
        define('APP_PATH','./Application/');

        // 引入ThinkPHP入口文件
        require './ThinkPHP/ThinkPHP.php';


    [其他自定义配置]

        APP_PATH                应用目录[路径必须已/结尾]
        DIR_SECURE_FILENAME     目录安全文件名[index.html]             // 为了防止访问到应用程序的目录结构
        DIR_SECURE_CONTENT      目录安全文件内容
        BUILD_DIR_SECURE        是否生成目录安全文件[boolean]


    [自动生成]

        第一次访问应用入口文件时,会自动生成应用程序目录

    [Controller]

        程序默认控制器类在   ./Application/Home/Controller/IndexController.class.php    中

        [创建控制器类]
            // 设置命名空间
            namespace Home\Controller;
            // 导入命名空间
            use Think\Controller;
            // 控制器类
            class IndexController extends Controller(){
                public function index(){
                    // ...
                }
            }

        [完整URL]
            127.0.0.1/ThinkPHP/index.php/Home/Index/index
            index.php       应用程序入口文件
            Home            主模块
            Index           控制器名
            index           方法

[3] 模块化和URL模式

    [模块化设计]
        Application      默认应用目录
        ├─Common         公共模块
        ├─Home           前台模块
        ├─Admin          后台模块
        ├─...            其他更多模块
        ├─Runtime        默认运行时目录

        把Application/Home作为前台,Application/Admin作为后台,无须创建admin入口
        
    [模块设置]
        // 在    Application/Common/Conf/config.php    文件中设置
        MODULE_DENY_LIST    =>  ['Common','Runtime'],             // 禁止访问的模块,Common / Runtime默认禁止访问
        MODULE_ALLOW_LIST   =>  ['Admin','Home'],                 // 允许访问的模块
        DEFAULT_MODULE      =>  'Home',                           // 默认访问模块
        MULTI_MODULE        =>  false,                            // 单模块设置

    [使用    127.0.0.1/ThinkPHP/admin.php   访问Application/Admin模块]

        // 新建admin.php
        // 设置指向的应用程序目录
        // 添加配置信息
        $_GET['m'] = 'Admin'          默认指向Admin模块
        $_GET['c'] = 'Test'           默认指向Test控制器类

    [URL模式]

        // PATHINFO 模式
        http://127.0.0.1/ThinkPHP/index.php/Home/Index/user/user/sc/password/123456
        index.php/模块/控制器/方法/[键值对传参]

        public function user($user,$password){}

        // 普通模式
        http://127.0.0.1/ThinkPHP/index.php?m=Home&c=Index&a=user&user=sc&password=123456

            [修改键名称]
                VAR_MODULE      =>  'm';
                VAR_CONTROLLER  =>  'c';
                VAR_ACTION      =>  'a';

        // REWRITE 模式
        // 可以将PATHINFO中的index.php省略
        httpd.conf 文件中开启 mod_rewrite.so 模块
        AllowOverride None 将 None 改为 All
        创建.htaccess文件
        
[4] 模型初步

    [PDO]
        
        PDO 支持所有类型数据库

        [配置]
            // TP 3.2.3所有数据库连接都使用PDO
            // 修改模块配置文件 Home\Common\Conf
            'DB_TYPE'    =>  'mysql',       // 数据库类型
            'DB_HOST'    =>  '127.0.0.1',   // 服务器地址 采用IP地址
            'DB_NAME'    =>  'thinkphp',    // 数据库名
            'DB_USER'    =>  'root',        // 用户名
            'DB_PWD'     =>  '',            // 密码
            'DB_PORT'    =>  '3306',        // 端口 留空则取默认端口
            'DB_PREFIX'  =>  'think_',      // 数据库表前缀
            'DB_CHARSET' =>  'UTF8',        // 数据库编码

    [实例化模型类]

        // 实例化Model基类 [适用于简单的CURD操作]
        $user = new Model('User'[,'think_','mysql://root:@localhost/thinkphp#utf8']);
        $user = M('User');

        // 实例化具体的模型类
        $user = new UserModel();            // 需要 use Home\Model\UserModel;
        $user = D('User');                  // D() 更加智能[如果不存在具体的模型类就会实例化基类]

        M() 无需加载类,效率最高
        使用D() 加载具体的模型类时如果重写了构造方法会造成错误
        
        [空模型类]

            // 如果需要原生sql操作的话可以使用空模型类
            $user = M();
            $user->query('select * from think_user;');

    [model类 命名规范和配置]

        UserTypeModel.class.php 对应 think_user_type 表
        // 配置对应表(数据库)
        protected $tablePrefix;
        protected $tableName;
        protected $trueTableName;
        protected $dbName;

    [页面trace调试工具]

        'SHOW_PAGE_TRACE'   =>  true;

    [字段缓存]

        'DB_FIELDS_CACHE'   =>  true;
        关闭调试模式并开启(默认)字段缓存时,在获取表数据的时候TP会把字段(表结构)记录到Runtime/Data/_fields文件中,提高效率
        字段缓存一般开发完成后开启,开启字段缓存后当表结构发生变化时获取的表数据不会更新表结构[删除_fields文件可更新字段数据]
        开发阶段(调试模式)需要经常更新表结构,所以关闭字段缓存

        [查看字段结构]

            $user->getDbFields();

        [自定义数据表结构]

            // 可避免IO开销和提升性能
            protected $fields = [
                                    '_pk'=>'id',
                                    'user',
                                    'email',
                                    'date',
                                    'type'=>['id'=>'smallint','user'=>'varchar','email'=>'varchar','date'=>'datetime']
                                ];
            // _pk是主键,type记录字段类型
            
[5] SQL 查询语句

    [查询方式]

        [条件查询]

            SELECT * FROM think_user WHERE id=1 AND user='小明';

            // 字符串条件查询
            $user->where('id=1 AND user=\'小明\'')->select();             // 直接使用字符串,不安全
            $user->where('id=%d AND user=\'%s\'',[1,'小明'])->select();   // 使用预处理机制,更加安全

            // 数组条件查询
            $condition = [
                            'id'     => 1,
                            'user'   => '小明',
                            '_logic' => 'OR'            // 逻辑关系默认为AND
                        ];
            $user->where($condition)->select();
            // 对象条件查询
            $condition       = new \stdClass();
            $condition->id   = 1;
            $condition->user = '小明';
            $condition->id   = 'OR';

            [表达式查询]

                SELECT * FROM think_user WHERE user LIKE '小明';

                // 数组表达式条件查询
                $condition = [
                                'user'   => ['LIKE','小%'],
                            ];
                // 表达式值
                EQ              =
                NEQ             <>
                LT              <
                GT              >
                ELT             <=
                EGT             >=
                LIKE            LIKE
                [NOT] BETWEEN   [NOT] BETWEEN           // BETWEEN 和 IN 的not形式中间必须加空格: 'id'=>['not in','1,3']
                [NOT] IN        [NOT] IN
                EXP             sql语法查询             // = <> < > <= >= like between in 其他语法

            [快捷查询]

                $map['user|email'] => 'Sc'                                                // 不同字段相同条件查询
                $map['user&email'] => ['Sc',['LIKE','hellosc@qq.com'],'_multi'=>true]     // 不同字段不同条件查询,_multi必须放在最后

            [区间查询]

                $map['id']  =>  [['LT',4],['GT',1]]                  id<4 AND id>1
                $map['id']  =>  [['LT',1],['GT',4],'OR']             id<1 OR  id>4

            [组合查询]

                // 组合查询是数组查询方式的一个扩展性查询,添加了3个索引
                
                _string 字符串方式
                $map['id']      =>  2,
                $map['_string'] =>  'date like "2010-10-10" and email like "%@qq.com"'

                _query  请求字符串方式
                $map['id']      =>  2,
                $map['_string'] =>  'status=1&score=100$_logic=and'

                _complex 复合查询
                $where['name']      =>  ['LIKE','孙%'],
                $where['sex']       =>  1,
                $where['_logic']    =>  'OR'
                $map['_complex']    =>  $where,
                $map['score']       =>  100
                // SLEECT * FROM xxx WHERE ((score=100) AND (`name` LIKE '孙%' OR `sex`=1));

            [统计查询]

                // 直接返回结果集,不需要使用select()

                [count]

                    $user->count();                 // 数据总条数
                    $user->count('email');          // 字段总条数,遇到null时不统计
                    $user->where('id<6')->count();

                [max/min/avg/sum]

                    $user->max('id');
                    // ...
            
            [动态查询]

                // SELECT * FROM xxx WHERE id=1;
                $user->getById(1);

                // SELECT user FROM xxx WHERE id=1;
                $user->getFieldById(1,'user');

            [SQL 查询]

                // 读操作
                $user->query('SELECT * FROM think_user');

                // 写操作
                $user->execute('DELETE FROM think_user WHERE id=1');

[6] 连贯操作

    // where/order 等连贯方法返回model对象,所以支持连贯操作,select返回数据集,应该放到最后
    M()->where('id>1')->order('id asc')->limit(0,2)->select();

    [连贯方法]

        where/order/field/limit/page/table/alias[别名]/group/having/comment[注释]/join/union[合并结果集]/distinct[选取列中不同值]/cache[缓存内容]

    [命名范围]

        [生成]
            // 将SQL语句封装到具体的模型类里,分层更加明显
            protected $_scope = [
                'sql1' => ['where'=>['id'=>3]],
                'sql2' => ['where'=>['user'=>['LIKE','孙%'],'id'=>['GT',2]],'order'=>'id asc'],
                'default' => ['field'=>'id,user','order'=>'id asc']
            ];

        [调用]

            // 调用命名范围
            $user->scope('sql1')->select();

        [调整]

            // 如果额外的命名范围有冲突,则后面的覆盖前面的
            $user->scope('sql1,sql2',['order'=>'id desc'])->select();
            
        [自定义命名范围]

            $user->scope(['where'=>['user'=>['LIKE','王%'],'id'=>['GT',2]],'order'=>'id DESC'])->select();

        [动态调用]

            // 直接调用命名范围名称,可能会产生冲突
            $user->sql1()->select();

[7] CURD 操作

    [创建数据对象]
        在数据库(添加)操作之前,首先要创建数据

        [自动获取]
            // 接收POST传值
            M('User')->create();            // 获取POST值中含有数据表字段的值

        [手动获取]
            // 数组和对象方式
            M('User')->create(['user'=>'sc','email'=>'hellosc@qq.com']);
            M('User')->create(json_decode('{"user":"sc","email":"hellosc@qq.com"}'));
            // 改为GET传值
            M('User')->create($_GET);

        [读取/修改/新增 数据对象]

            $user = M('User');
            $user->create();                            // 创建数据
            var_dump($user->data());                    // 读取数据对象[如果是查询操作,只能查询一条]
            $user->date = date('Y-m-d H:i:s');          // 添加数据
            $user->email = 'hellosc@qq.com';            // 修改数据
            echo $user->user;

        [直接生成数据对象]

            使用data()获取数据对象只能在创建数据对象成功时,否则返回模型类本身
            $user->data(['user'=>'sc','email'=>'hellosc@qq.com']);      // 也支持字符串和对象

        [create 内置的数据操作]
            // create方法的第二个参数可以指定创建数据的操作状态,默认情况下是自动判断是写入还是更新操作
            // 使用第二个参数时要第一个参数写上$_POST/$_GET/...

            M('User')->create($_POST,Model::MODEL_UPDATE);          // 当POST值中包含主键字段值时,默认为update操作
            M('User')->create($_POST,Model::MODEL_INSERT);          // 指定为insert
            M('User')->create($_POST,3);                            // 自定义操作

        [create 配合连贯操作]

            // 使用filed连贯操作过滤字段
            M('User')->field('user')->create($_POST,3);
            // 模型类中限制字段
            protected $insertFields = 'user,date';
            protected $updateFields = 'user';

    [数据写入]

        add()

        // create() 只是创建了数据对象并保存到内存中,并没有进行实际操作,进行add()/save()时才真正写入数据库
        $user->add(['user'=>'sc','email'=>'hellosc@qq.com']);                   // 写入数据库
        $user->data(['user'=>'sc','email'=>'hellosc@qq.com'])->add();           // add()之前如果已经创建数据对象就不需要传参了

    [数据读取]

        find()/select()/getField()

        // 读取一条数据
        $user->find();

        // 读取所有数据
        $user->select();

        // 读取第一条指定字段的值
        $user->getField('name');

        // 读取所有指定字段的值
        $user->getField('name',true);

        // 读取多个字段的值[屏蔽重复的值]
        $uesr->getField('name,email');              // 得到下标是'name'值为email的关联数组
        $user->getField('name,email,date');         // 得到下标是'name'值为name,email,date的关联数组
        $user->getField('name,email,date',2);       // 限制两条数据
        $user->getField('name,email,date','/');     // 得到下标是'name'值为name,email,date的使用'/'分隔字符串

    [数据更新]

        save()/setField()

        // 更新数据[成功返回1,失败返回0]
        $user->where(['id'=>2])->save(['user'=>'Sc']);
        $user->save(['id'=>2,'user'=>'Sc']);                        // 同上,默认主键[id]为条件

        // 更新个别字段的值
        $user->where('id=2')->setField('user','Sc');

        // 字段累加累减
        $user->where('id=2')->setInc('count',1);            // 字段累加1
        $user->where('id=2')->setDec('count',1);            // 字段累减1

    [数据删除]

        delete()

        // 按照主键的值删除
        $user->delete(11);                          // deleter()方法返回受影响的行数,失败返回false,判断是否执行成功应该使用恒等

        // 按照主键删除多条数据
        $user->delete('11,13,29');

        // 按指定条件删除
        $user->where('id=11')->delete();

        // 连贯操作删除最后添加的记录
        $user->where('1')->order(['date'=>'DESC'])->limit(1)->delete();
        # DELETE FROM `think_user` WHERE (1) ORDER BY `date` DESC LIMIT 1

    [ActiveRecord 模式]
        # ThinkPHP实现了ActiveRecords模式的ORM模型,采用了非标准的ORM模型
        ActiveRecord模式是对象化的操作,依靠数据对象进行处理,所以insert/update操作只能操作一条数据

        [创建数据]
            // $user->create();
            $user->name = 'sc';
            $user->email = 'hellosc@qq.com';
            $user->add();

        [查询数据]

            [查询一条数据]
                # 按主键查询
                $user->find(1);                     // 查询主键为1的数据

                # 按字段[简单]查询
                $user->getByEmail('sc@bug.hk');     // 查询email值为xxx的数据

            [查询多条数据]
                # 按照主键查询
                $user->select('1,2,4');             // 查询主键为1/2/4的数据

        [更新数据]

            # 按照主键更新数据
                $user->id = 1;
                $user->email = 'hellosc@qq.com';
                $user->save();

        [删除数据]

            # 按照主键值进行删除
                $user->id = '11,12';
                $user->delete();
